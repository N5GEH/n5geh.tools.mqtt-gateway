name: Snyk Container Scan and Create Issues

on:
  push:
    branches:
      - 20-security-scan-of-the-image
  pull_request:
    branches:
      - main

jobs:
  snyk:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API image
      run: docker build -t n5gehtoolsmqtt-gateway-api:latest -f ./backend/api/Dockerfile .

    - name: Build Gateway image
      run: docker build -t n5gehtoolsmqtt-gateway-gateway:latest -f ./backend/gateway/Dockerfile .

    - name: Snyk Scan API image
      id: snyk_api_scan
      uses: snyk/actions/docker@master
      with:
        image: 'n5gehtoolsmqtt-gateway-api:latest'
        args: '--severity-threshold=high --json-file-output=snyk_api_results.json'
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

    - name: Snyk Scan Gateway image
      id: snyk_gateway_scan
      uses: snyk/actions/docker@master
      with:
        image: 'n5gehtoolsmqtt-gateway-gateway:latest'
        args: '--severity-threshold=high --json-file-output=snyk_gateway_results.json'
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

    - name: Upload Snyk API scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: snyk-api-results
        path: snyk_api_results.json

    - name: Upload Snyk Gateway scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: snyk-gateway-results
        path: snyk_gateway_results.json

    - name: Create issues from Snyk API scan
      if: always()
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const snykOutput = fs.readFileSync('snyk_api_results.json', 'utf-8');

          const parseSnykOutput = (output) => {
            const lines = output.split('\n');
            const issues = [];
            let currentIssue = null;
            let recommendations = '';

            lines.forEach(line => {
              if (line.startsWith('Upgrade ')) {
                if (currentIssue) issues.push(currentIssue);
                currentIssue = { title: line.trim(), details: '' };
              } else if (line.startsWith('Recommendations for base image upgrade:')) {
                currentIssue = null;
                recommendations = line.trim();
              } else if (currentIssue) {
                currentIssue.details += line.trim() + '\n';
              }
            });
            if (currentIssue) issues.push(currentIssue);

            return { issues, recommendations };
          };

          const { issues, recommendations } = parseSnykOutput(snykOutput);

          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'snyk'
          });

          const createIssues = async (issues) => {
            for (const issue of issues) {
              const issueExists = existingIssues.data.some(existingIssue => existingIssue.title === issue.title);
              if (issueExists) {
                console.log(`Issue already exists: ${issue.title}`);
                continue;
              }

              console.log('Creating issue with title:', issue.title);
              console.log('Creating issue with body:', issue.details);

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issue.title,
                body: issue.details,
                labels: ['snyk']
              });

              // Add a delay to avoid rate limit issues
              await new Promise(resolve => setTimeout(resolve, 2000));
            }
          };

          await createIssues(issues);

          if (recommendations) {
            const issueTitle = 'Snyk Base Image Recommendations';
            const issueExists = existingIssues.data.some(existingIssue => existingIssue.title === issueTitle);
            if (!issueExists) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: recommendations,
                labels: ['snyk']
              });
            }
          }

    - name: Create issues from Snyk Gateway scan
      if: always()
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const snykOutput = fs.readFileSync('snyk_gateway_results.json', 'utf-8');

          const parseSnykOutput = (output) => {
            const lines = output.split('\n');
            const issues = [];
            let currentIssue = null;
            let recommendations = '';

            lines.forEach(line => {
              if (line.startsWith('Upgrade ')) {
                if (currentIssue) issues.push(currentIssue);
                currentIssue = { title: line.trim(), details: '' };
              } else if (line.startsWith('Recommendations for base image upgrade:')) {
                currentIssue = null;
                recommendations = line.trim();
              } else if (currentIssue) {
                currentIssue.details += line.trim() + '\n';
              }
            });
            if (currentIssue) issues.push(currentIssue);

            return { issues, recommendations };
          };

          const { issues, recommendations } = parseSnykOutput(snykOutput);

          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'snyk'
          });

          const createIssues = async (issues) => {
            for (const issue of issues) {
              const issueExists = existingIssues.data.some(existingIssue => existingIssue.title === issue.title);
              if (issueExists) {
                console.log(`Issue already exists: ${issue.title}`);
                continue;
              }

              console.log('Creating issue with title:', issue.title);
              console.log('Creating issue with body:', issue.details);

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issue.title,
                body: issue.details,
                labels: ['snyk']
              });

              // Add a delay to avoid rate limit issues
              await new Promise(resolve => setTimeout(resolve, 2000));
            }
          };

          await createIssues(issues);

          if (recommendations) {
            const issueTitle = 'Snyk Base Image Recommendations';
            const issueExists = existingIssues.data.some(existingIssue => existingIssue.title === issueTitle);
            if (!issueExists) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: recommendations,
                labels: ['snyk']
              });
            }
          }